*.env
*.env.*

# Python
*.py[cod]
__pycache__/
*.so
*.egg
*.egg-info/
dist
build

# Django
*.log
*.pot
*.pyc
*.mo
*.pyo
*.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
*.log
local_settings.py
db.sqlite3
celerybeat-schedule

# Environments
.env
venv/
env/
ENV/
.venv/
.env/

# Migrations
*/migrations/*

# Media
media/

# Static files
staticfiles/

# Jupyter Notebook
.ipynb_checkpoints

# IDEs and editors
.idea/
.vscode/
*.swp

# Logs
logs
*.log
npm-debug.log*

# Dependency directories
node_modules/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn
.yarn-integrity

# OS-specific files
.DS_Store
Thumbs.db
ehthumbs.db

# Pytest cache
.pytest_cache/

# Coverage directory
htmlcov/

# Terraform
.terraform/
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

keys/
*.pub
*.pem
# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc